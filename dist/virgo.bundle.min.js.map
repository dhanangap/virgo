{"version":3,"file":"virgo.bundle.min.js","mappings":"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","sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///webpack/runtime/make namespace object","webpack:///./src/core/Component/ComponentConfig.ts","webpack:///./src/core/Component/Component.ts","webpack:///./src/components/Navigation/Scrollspy/Scrollspy.ts","webpack:///./src/bundle.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Virgo\"] = factory();\n\telse\n\t\troot[\"Virgo\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const ComponentConfigDefaults = {\n    // Static class usage\n    autoCreateInstances: true,\n    autoGenerateId: true,\n    // Class instance config\n    id: undefined,\n};\n","import { ComponentConfigDefaults } from \"./ComponentConfig\";\n/** Virgo Component base class. */\nexport default class Component {\n    /**\n     * Create instance of this class.\n     * @param element - HTML Element (or query selector string of element) to be created as instance.\n     * @param config - Component configuration of the instance.\n     */\n    constructor(element, config = ComponentConfigDefaults) {\n        let htmlElement = (typeof element === \"string\") ? document.querySelector(element) : element;\n        if (!htmlElement)\n            return;\n        // Set properties of this instance.\n        this.element = htmlElement;\n        this.id = config.id ? config.id : undefined;\n        // If an id is provided, set element's HTML id.\n        if (this.id)\n            this.element.id = this.id;\n    }\n    /**\n     * Returns array of instances of this class.\n     * Will return an empty array if there's no instance registered.\n     */\n    static get instances() {\n        if (!this.registry[this.className])\n            return [];\n        return this.registry[this.className];\n    }\n    /**\n     * Register created instance of this class to be indexed and used later.\n     * @param instance - The instance to be registered\n     */\n    static register(instance) {\n        if (!this.registry[this.className])\n            this.registry[this.className] = [];\n        this.registry[this.className].push(instance);\n    }\n    /**\n     * Initialize class and creating instances from selector.\n     * @param selector - A valid query selector of elements to be created as instance of this class (optional).\n     * @param config - Component configuration (optional).\n     * @returns total number of instances created.\n     */\n    static init(selector, config = ComponentConfigDefaults) {\n        // If autoCreateInstances config is true, create instances from selected elements on the page.\n        if (this.config.autoCreateInstances) {\n            const elements = document.querySelectorAll(selector ? selector : this.defaultSelector);\n            for (let index = 0; index < elements.length; index++) {\n                const element = elements[index];\n                let id;\n                // Generate the id.\n                if (config.autoGenerateId)\n                    id = element.id ? element.id : `${this.className}-${this.instances.length}`;\n                // Register the newly created instance.\n                this.register(new this(element, Object.assign(Object.assign({}, config), { id })));\n            }\n            return elements.length;\n        }\n        // Return 0 if autoCreateInstances config is set to false.\n        return 0;\n    }\n}\n// [ Static ] ---------------------------------------------------------------------------------\nComponent.className = \"component\";\nComponent.defaultSelector = \".component\";\nComponent.registry = {};\nComponent.config = ComponentConfigDefaults;\n","import Component from \"../../../core/Component/Component\";\n/**\n * Class representing a component that acts as indicator in which section\n * the page is currently now when being scrolled.\n */\nexport default class Scrollspy extends Component {\n    /**\n     * Creates a new Scrollspy element.\n     * @param element - HTML DOM Element of the component.\n     * @param targetElement - HTML DOM Element of the target that will be monitored.\n     * @param config - Component configuration.\n     */\n    constructor(element, config) {\n        super(element);\n        this.targetElement = this.element.dataset[\"target\"] ? document.querySelector(this.element.dataset[\"target\"]) : document.body;\n        this.targetElement = this.targetElement ? this.targetElement : document.body;\n        this.currentId = null;\n        this.targetIds = this.extractTargetIds();\n        this.targetElement.addEventListener(\"scroll\", () => {\n            this.scrollHandler(this.targetElement.scrollTop);\n        });\n        this.targetElement.dispatchEvent(new CustomEvent(\"scroll\"));\n        this.targetElement.style.scrollBehavior = \"smooth\";\n    }\n    /**\n     * Extracting target ids that will be monitored and retrieving their respective locations.\n     * @returns the list of ids and location in format { \"id\": location }\n     */\n    extractTargetIds() {\n        let targetIds = {};\n        const links = this.element.querySelectorAll(\"a\");\n        const button = this.element.querySelectorAll(\"button\");\n        const containerTop = this.targetElement.getBoundingClientRect().top;\n        for (const link of links) {\n            if (link.hasAttribute(\"href\")) {\n                const href = link.getAttribute(\"href\");\n                const id = link.hash;\n                const isOtherPage = (href !== \"#\") && ((link.pathname !== window.location.pathname) && (link.pathname + '/' !== window.location.pathname));\n                const target = (id && id !== \"\") ? this.targetElement.querySelector(id) : null;\n                if (!isOtherPage && id && target) {\n                    const targetTop = target.getBoundingClientRect().top;\n                    const targetHeight = target.getBoundingClientRect().height;\n                    targetIds[id] = {\n                        element: link,\n                        top: targetTop - containerTop,\n                        left: 0,\n                        height: targetHeight,\n                        width: 0,\n                    };\n                }\n            }\n        }\n        return targetIds;\n    }\n    scrollHandler(scrollTop) {\n        for (const id of Object.keys(this.targetIds)) {\n            // Scrolling inside range\n            if (scrollTop >= this.targetIds[id].top &&\n                scrollTop <= this.targetIds[id].top + this.targetIds[id].height) {\n                if (this.currentId !== id) {\n                    this.targetIds[id].element.classList.add(\"active\");\n                    this.currentId = id;\n                }\n            }\n            // Scrolling outside range\n            else {\n                this.targetIds[id].element.classList.remove(\"active\");\n                this.currentId = null;\n            }\n        }\n    }\n}\nScrollspy.className = \"scrollspy\";\nScrollspy.defaultSelector = \".scrollspy\";\n","import Scrollspy from \"./components/Navigation/Scrollspy/Scrollspy\";\nScrollspy.init();\n"],"names":["root","factory","exports","module","define","amd","self","Symbol","toStringTag","Object","defineProperty","value","ComponentConfigDefaults","autoCreateInstances","autoGenerateId","id","undefined","Component","constructor","element","config","htmlElement","document","querySelector","this","instances","registry","className","static","instance","push","selector","elements","querySelectorAll","defaultSelector","index","length","register","assign","Scrollspy","super","targetElement","dataset","body","currentId","targetIds","extractTargetIds","addEventListener","scrollHandler","scrollTop","dispatchEvent","CustomEvent","style","scrollBehavior","links","containerTop","getBoundingClientRect","top","link","hasAttribute","href","getAttribute","hash","isOtherPage","pathname","window","location","target","targetTop","targetHeight","height","left","width","keys","classList","add","remove","init"],"sourceRoot":""}